<?php

namespace App\Social\SocialNetworks;

use App\Http\Controllers\PartnerController;
use App\Models\Product;
use App\Models\Promocode;
use App\Social\SocialNetworks\SocialNetwork;
use App\Social\Notifications\TelegramNotification;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;

/**
 *
 */
class Telegram implements SocialNetwork
{

    /**
     * @param $notification
     * @return \Illuminate\Http\Client\Response
     */
    public function sendNotification($notification) {
        $response = Http::get($notification->getUrl(), $notification->getData());

        return $response;
    }

    /**
     * @param $message
     * @return TelegramNotification
     */
    public function generateNotification($message, $typeNotification = false, $chat = false) {
        return new TelegramNotification($message, $typeNotification, $chat);
    }

    /**
     * @param $order
     * @return string
     */
    public function generateOrderNotification($order) {
        $promocode = "";
        if($order->promocode) {
            $promocode = "\nüëë–ü—Ä–æ–º–æ–∫–æ–¥: " . $order->promocode . "\nüîñ–ó–Ω–∏–∂–∫–∞: " . Promocode::getDiscount($order->promocode) . "%";
        }

        // Generate poshta info
        $typePoshta = "";
        if ($order->type_poshta == "–ù–æ–≤–∞ –ü–æ—à—Ç–∞") {
            $typePoshta .= "‚úâ–ü–æ—à—Ç–∞: –ù–æ–≤–∞ –ø–æ—à—Ç–∞";
            if ($order->courier) {
                $typePoshta .= "\n--–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫—É—Ä'—î—Ä–æ–º –ø–æ –∞–¥—Ä–µ—Å—É--\n" .
                    "üìå–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: " . $order->nova_city .
                    "\n‚¨Ü–í—É–ª–∏—Ü—è: " . $order->street .
                    "\nüè°–ë—É–¥–∏–Ω–æ–∫: " . $order->house;
                if ($order->room) {
                    $typePoshta .= "\nüè®–ö–≤–∞—Ä—Ç–∏—Ä–∞: " . $order->room;
                }
            } else {
                $typePoshta .= "\n--–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è--\n".
                    "üìå–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: " . $order->nova_city .
                    "\nüö™–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: " . $order->nova_warehouse;
            }
        } else {
            $typePoshta .= "‚úâ–ü–æ—à—Ç–∞: –£–∫—Ä –ø–æ—à—Ç–∞";
            if ($order->courier) {
                $typePoshta .= "\n--–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫—É—Ä'—î—Ä–æ–º –ø–æ –∞–¥—Ä–µ—Å—É--\n" .
                    "üìå–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: " . $order->ukr_city .
                    "\n‚¨Ü–í—É–ª–∏—Ü—è: " . $order->street .
                    "\nüè°–ë—É–¥–∏–Ω–æ–∫: " . $order->house;
                if ($order->room) {
                    $typePoshta .= "\nüè®–ö–≤–∞—Ä—Ç–∏—Ä–∞: " . $order->room;
                }
            }
            else {
                $typePoshta .= "\n--–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è--\n" .
                    "üìå–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç: " . $order->ukr_city .
                    "\nüö™–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: " . $order->ukr_post_office;
            }
        }

        // Get Products from order
        $products =  DB::table('products')
            ->join('order_products', 'products.id', '=', 'order_products.product_id')
            ->select('products.id', 'products.name', 'order_products.size', 'order_products.price', 'order_products.count as product_count')
            ->where('order_products.order_id', $order->id)
            ->get();
        $products = Product::getProductsWithImages($products);

        // Generate products info
        $orderProducts = "";
        foreach($products as $index => $product) {
            $orderProducts .= 'üì¶Ô∏è' . $product->name . " - "
                . $product->size
                . " - " . $product->product_count . "—à—Ç. –ø–æ "
                . $product->price . "–≥—Ä–Ω.—à—Ç.\n"
                . urldecode(route("site.product", [$product->id, $product->size])) . "\n";
        }

        // Generate all message for notification
        return "üéØ–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #$order->id –Ω–∞ —Å–∞–π—Ç—ñ Medobear\n\n--–ö–æ–Ω—Ç–∞–∫—Ç–∏ –ø–æ–∫—É–ø—Ü—è--\nüòÄ–ü–æ–∫—É–ø–µ—Ü—å: " . $order->pip .
            "\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: " . $order->phone .
            $promocode .
            "\n\n--–í—ñ–¥–ø—Ä–∞–≤–∫–∞--\n" .
            $typePoshta .
            "\n\nüí∞Ô∏è–¶—ñ–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " . $order->price . "–≥—Ä–Ω.\n" .
            "\n--–ó–∞–º–æ–≤–ª–µ–Ω—ñ –¢–æ–≤–∞—Ä–∏--\n" .
            $orderProducts .
            "\nüíé–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ: " . route("admin.admin");
    }

    public function generatePartnerOrderNotification($order, $partner) {
        $partnerController = new PartnerController();
        $balance = $partnerController->getAccountBalance($partner);
        $promocode = "";
        if($order->promocode) {
            $promocode = "\nüëë–ü—Ä–æ–º–æ–∫–æ–¥: " . $order->promocode . "\nüîñ–ó–Ω–∏–∂–∫–∞: " . Promocode::getDiscount($order->promocode) . "%";
        }

        // Get Products from order
        $products =  DB::table('products')
            ->join('order_products', 'products.id', '=', 'order_products.product_id')
            ->select('products.id', 'products.name', 'order_products.size', 'order_products.price', 'order_products.count as product_count')
            ->where('order_products.order_id', $order->id)
            ->get();
        $products = Product::getProductsWithImages($products);

        // Generate products info
        $orderProducts = "";
        foreach($products as $index => $product) {
            $orderProducts .= 'üì¶Ô∏è' . $product->name . " - "
                . $product->size
                . " - " . $product->product_count . "—à—Ç. –ø–æ "
                . $product->price . "–≥—Ä–Ω.—à—Ç.\n"
                . urldecode(route("site.product", [$product->id, $product->size])) . "\n";
        }

        return "üéØ–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #$order->id –Ω–∞ —Å–∞–π—Ç—ñ Medobear\n\n--–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ–∫—É–ø—Ü—è--\nüòÄ–ü–æ–∫—É–ø–µ—Ü—å: " . $order->pip .
        $promocode .
        "\n\nüí∞Ô∏è–¶—ñ–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: " . $order->price . "–≥—Ä–Ω.\n" .
        "üí∞Ô∏è–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: " . intval(round($order->price * 0.3)) . "–≥—Ä–Ω.\n" .
        "üí∞Ô∏è–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: " . $balance . "–≥—Ä–Ω.\n" .
        "\n--–ó–∞–º–æ–≤–ª–µ–Ω—ñ –¢–æ–≤–∞—Ä–∏--\n" .
        $orderProducts .
        "\nüíé–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Ü—ñ: " . route("partner.partner");
    }
}
